import os
import argparse
import numpy as np
import matplotlib.pyplot as plt
from itertools import product
from scipy.spatial import Voronoi
from pymatgen.core import Structure
from pymatgen.symmetry.analyzer import SpacegroupAnalyzer

# --- 提供された周期境界条件対応のヘルパー関数 ---

def pbc_distance(c1, c2, lattice):
    """PBC下の最小イメージ距離を計算"""
    lat = lattice.matrix
    inv = np.linalg.inv(lat)
    d = c1 - c2
    f = d.dot(inv)
    f -= np.round(f)
    return np.linalg.norm(f.dot(lat))

def replicate_neighbors(prim):
    """
    ±1セル展開モード
    戻り値: (Cartesian点群, 中央セル原子のインデックス一覧)
    """
    lat   = prim.lattice.matrix
    fracs = np.array([s.frac_coords for s in prim.sites])
    n0    = len(fracs)
    shifts = list(product([-1,0,1], repeat=3))
    pts   = []
    for shift in shifts:
        for f in fracs:
            pts.append((f + shift).dot(lat))
    pts_cart       = np.vstack(pts)
    center_block   = shifts.index((0,0,0))
    center_indices = [center_block * n0 + i for i in range(n0)]
    return pts_cart, center_indices

def replicate_buffer(prim, buffer_ang):
    """
    bufferレイヤーモード
    戻り値: (Cartesian点群, 中央セル原子のインデックス一覧)
    """
    lat     = prim.lattice.matrix
    fracs   = np.array([s.frac_coords for s in prim.sites])
    n0      = len(fracs)
    lengths = np.linalg.norm(lat, axis=1)
    fbuf    = buffer_ang / lengths

    pts = []
    for f in fracs:
        pts.append(f.dot(lat))
    center_indices = list(range(n0))

    for shift in product([-1,0,1], repeat=3):
        if shift == (0,0,0):
            continue
        for f in fracs:
            ok = True
            for i, sh in enumerate(shift):
                if   sh ==  1 and f[i] >= fbuf[i]:
                    ok = False
                elif sh == -1 and f[i] <= 1 - fbuf[i]:
                    ok = False
                if not ok:
                    break
            if ok:
                pts.append((f + shift).dot(lat))

    return np.vstack(pts), center_indices

# --- ボロノイ分割に基づくポアサイズ計算関数 ---

def calculate_pore_sizes(structure,
                         radius_tol: float = 0.5,
                         symprec: float = 0.01,
                         filt_tol: float = 0.01,
                         uniq_tol: float = None,
                         mode: str = "neighbors",
                         buffer_ang: float = 5.0):

    if uniq_tol is None:
        uniq_tol = symprec

    sga  = SpacegroupAnalyzer(structure, symprec=symprec)
    prim = sga.get_primitive_standard_structure()
    lat  = prim.lattice
    inv_lat = np.linalg.inv(lat.matrix)

    if mode == "neighbors":
        pts_cart, center_idx = replicate_neighbors(prim)
    elif mode == "buffer":
        pts_cart, center_idx = replicate_buffer(prim, buffer_ang)
    else:
        raise ValueError("Invalid mode. Choose 'neighbors' or 'buffer'.")

    vor = Voronoi(pts_cart)
    
    all_verts_in_center_regions = set()
    for pi in center_idx:
        reg_idx = vor.point_region[pi]
        reg = vor.regions[reg_idx]

        if not reg or -1 in reg:
            continue
        
        for vid in reg:
            all_verts_in_center_regions.add(tuple(np.round(vor.vertices[vid], 6)))
    
    verts_in_center = np.array(list(all_verts_in_center_regions))

    if len(verts_in_center) == 0:
        print("Warning: No Voronoi vertices found in the center cell regions. Check input structure or parameters.")
        return np.array([])

    pore_radii = []
    for v_cart in verts_in_center:
        min_dist = np.min([pbc_distance(v_cart, s.coords, lat) for s in prim.sites])
        
        if min_dist > radius_tol:
            frac_v = v_cart.dot(inv_lat) % 1.0
            
            if np.all((frac_v > filt_tol) & (frac_v < 1 - filt_tol)):
                pore_radii.append(min_dist)
    
    return np.array(pore_radii)

# --- ヒストグラムプロット関数（規格化機能追加） ---

def plot_pore_size_histogram(pore_radii, num_bins=50, output_file="pore_size_histogram.png",
                             xlim=None, ylim=None, normalize=True):
    """
    ポアサイズのヒストグラムをプロットします。X, Y軸の表示範囲を指定でき、規格化も可能です。

    Args:
        pore_radii (numpy.ndarray): 各ポアサイトの半径の配列。
        num_bins (int): ヒストグラムのビンの数。
        output_file (str): 出力するヒストグラムのファイル名。
        xlim (tuple, optional): X軸の表示範囲 (min, max)。指定しない場合は自動設定。
        ylim (tuple, optional): Y軸の表示範囲 (min, max)。指定しない場合は自動設定。
        normalize (bool): ヒストグラムを規格化するかどうか。Trueの場合、面積が1になるように規格化されます。
    """
    if len(pore_radii) == 0:
        print("No pore sizes to plot.")
        return

    plt.figure(figsize=(10, 6))
    
    # 規格化の設定
    weights = None
    y_label = 'Frequency'
    if normalize:
        # ヒストグラムの面積が1になるように規格化
        # binの幅を考慮する必要があるため、density=Trueを使用するのが最も簡単
        plt.hist(pore_radii, bins=num_bins, edgecolor='black', alpha=0.7, density=True)
        y_label = 'Probability Density'
    else:
        plt.hist(pore_radii, bins=num_bins, edgecolor='black', alpha=0.7)

    plt.title('Pore Size Distribution (Radius from Voronoi Vertex to Nearest Atom)')
    plt.xlabel('Pore Radius (Å)')
    plt.ylabel(y_label) # Y軸ラベルを動的に変更
    plt.grid(True, linestyle='--', alpha=0.6)

    if xlim:
        plt.xlim(xlim[0], xlim[1])
    
    if ylim:
        plt.ylim(ylim[0], ylim[1])

    plt.savefig(output_file, dpi=300)
    plt.show()
    print(f"Pore size histogram saved to {output_file}")


# --- メイン処理（規格化機能追加） ---

def main():
    parser = argparse.ArgumentParser(description="Calculate and plot pore size distribution using Voronoi tessellation, similar to Zeo++. Now with X and Y axis range control and normalization option.")
    parser.add_argument("input_file", type=str, help="Path to the structure file (e.g., POSCAR, CIF, XYZ).")
    parser.add_argument("--radius_tol", type=float, default=0.5,
                        help="Minimum distance from a Voronoi vertex to any atom to be considered a pore (Å). Default: 0.5")
    parser.add_argument("--symprec", type=float, default=0.01,
                        help="Tolerance for symmetry analysis in pymatgen. Default: 0.01")
    parser.add_argument("--filt_tol", type=float, default=0.01,
                        help="Fractional tolerance for filtering Voronoi vertices near cell boundaries. Default: 0.01")
    parser.add_argument("--uniq_tol", type=float, default=None,
                        help="Tolerance for unique Voronoi vertices. If None, symprec is used. Default: None")
    parser.add_argument("--mode", type=str, default="neighbors", choices=["neighbors", "buffer"],
                        help="Replication mode for PBC. 'neighbors' (±1 cell) or 'buffer' (distance-based). Default: 'neighbors'")
    parser.add_argument("--buffer_ang", type=float, default=5.0,
                        help="Buffer distance in Angstroms for 'buffer' replication mode. Default: 5.0")
    parser.add_argument("--bins", type=int, default=50,
                        help="Number of bins for the histogram. Default: 50")
    parser.add_argument("--output", type=str, default="pore_size_distribution.png",
                        help="Output file name for the pore size histogram. Default: 'pore_size_distribution.png'")
    
    parser.add_argument("--xlim", type=float, nargs=2, metavar=('X_MIN', 'X_MAX'),
                        help="Set the X-axis (Pore Radius) display range (e.g., --xlim 0 10).")
    parser.add_argument("--ylim", type=float, nargs=2, metavar=('Y_MIN', 'Y_MAX'),
                        help="Set the Y-axis (Frequency or Probability Density) display range (e.g., --ylim 0 0.5).")

    # 新しく追加された引数: 規格化フラグ
    parser.add_argument("--normalize", action=argparse.BooleanOptionalAction, default=True,
                        help="Normalize the histogram so that the area under the bars sums to 1. Default: True (normalized). Use --no-normalize to disable.")

    args = parser.parse_args()

    try:
        structure = Structure.from_file(args.input_file)
        
        print("Calculating pore sizes...")
        pore_radii = calculate_pore_sizes(
            structure,
            radius_tol=args.radius_tol,
            symprec=args.symprec,
            filt_tol=args.filt_tol,
            uniq_tol=args.uniq_tol,
            mode=args.mode,
            buffer_ang=args.buffer_ang
        )
        
        if len(pore_radii) == 0:
            print("No valid pore sizes found. Consider adjusting `radius_tol` or `filt_tol`.")
            return

        print("Plotting pore size histogram...")
        plot_pore_size_histogram(
            pore_radii,
            num_bins=args.bins,
            output_file=args.output,
            xlim=args.xlim,
            ylim=args.ylim,
            normalize=args.normalize # ここで規格化フラグを渡す
        )
        
        # 統計情報の表示
        print("\n--- Pore Size Statistics ---")
        print(f"Number of identified pore sites: {len(pore_radii)}")
        print(f"Mean pore radius: {np.mean(pore_radii):.3f} Å")
        print(f"Median pore radius: {np.median(pore_radii):.3f} Å")
        print(f"Standard deviation: {np.std(pore_radii):.3f} Å")
        print(f"Min pore radius: {np.min(pore_radii):.3f} Å")
        print(f"Max pore radius: {np.max(pore_radii):.3f} Å")

    except FileNotFoundError:
        print(f"Error: Input file '{args.input_file}' not found.")
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
