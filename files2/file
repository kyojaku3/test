#!/usr/bin/env python3

import numpy as np
from scipy.optimize import root_scalar
import matplotlib.pyplot as plt

# Constants
kB = 8.617333262145e-5  # eV/K
nu = 1e13  # s^-1 (pre-exponential factor)
beta = 1.0  # K/s (heating rate)

# Temperature range (peak temperature)
#T_unit='K'; Tp_list = np.linspace(300, 800, 100)  # K
T_unit='C'; Tp_list = np.linspace(100, 900, 100)  # C

# Results storage
E_numerical = []
E_redhead = []

for Tp in Tp_list:
    if T_unit == 'C':
        Tp += 273.15
    # Define nonlinear equation: x = (nu * Tp / beta) * exp(-x)
    def f(x):
        return x - (nu * Tp / beta) * np.exp(-x)

    # Solve numerically (x = E / kB Tp)
    sol = root_scalar(f, bracket=[1, 100], method='brentq')
    x_num = sol.root
    E_num = x_num * kB * Tp  # eV
    E_numerical.append(E_num)

    # Redhead approximation
    x_red = np.log(nu * Tp / beta) - 3.64
    E_red = x_red * kB * Tp  # eV
    E_redhead.append(E_red)

# Plotting
plt.figure(figsize=(8, 5))
plt.plot(Tp_list, E_numerical, label='Numerical Solution', color='blue')
plt.plot(Tp_list, E_redhead, label='Redhead Approximation', color='red', linestyle='--')
plt.xlabel(f'Peak Temperature Tp [{T_unit}]', fontsize=12)
plt.ylabel('Activation Energy E [eV]', fontsize=12)
plt.title('Redhead Approximation vs Numerical Solution', fontsize=14)
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
