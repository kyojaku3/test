#!/usr/bin/env python3

from ase.data import chemical_symbols, atomic_numbers
from ase import Atoms
from copy import deepcopy
from typing import List, Dict

def replace_atoms_in_object(atoms_object: Atoms, indices_to_replace: Dict[int, str],
                            is_first_frame: bool = False,
                            first_frame_replacements: Dict[int, Dict[str, str]] = None) -> Atoms:
    """
    既存のAtomsオブジェクトを受け取り、指定したインデックスの原子種を変更し、
    変更後の新しいAtomsオブジェクトを返します。
    変更された原子については、変更前後の情報を出力します。
    is_first_frameがTrueの場合、全変更情報を出力します。
    そうでない場合、first_frame_replacementsと比較し、異なる変更のみ出力します。

    Args:
        atoms_object (ase.Atoms): 変更元のAtomsオブジェクト。
        indices_to_replace (dict): 変更したい原子のインデックスと元の原子種のマッピング。
                                  例: {インデックス: '元の原子種'}
                                  同じ原子種が複数回指定された場合、変更後も同じ原子種が割り当てられます。
        is_first_frame (bool): 最初のフレームであるかどうかのフラグ。
        first_frame_replacements (dict): 最初のフレームで行われた実際の置換情報（インデックス: {before_symbol: ..., after_symbol: ...}）。

    Returns:
        ase.Atoms: 原子種が変更された新しいAtomsオブジェクト。
    """
    modified_atoms = deepcopy(atoms_object)
    existing_atomic_numbers = modified_atoms.get_atomic_numbers()
    existing_chemical_symbols = modified_atoms.get_chemical_symbols()

    assigned_replacement_atomic_numbers = {}
    used_atomic_numbers = set(existing_atomic_numbers)
    unique_original_symbols_to_replace = sorted(list(set(indices_to_replace.values())))

    # 各ユニークな元の原子種に対して、置換後の原子種を決定
    for original_symbol in unique_original_symbols_to_replace:
        original_atomic_number = atomic_numbers.get(original_symbol)
        if original_atomic_number is None:
            if is_first_frame: # 最初のフレームでのみ警告を出す
                print(f"警告: 不明な原子種 '{original_symbol}' が指定されました。スキップします。")
            continue

        found_replacement = False
        if original_atomic_number not in used_atomic_numbers:
            assigned_replacement_atomic_numbers[original_symbol] = original_atomic_number
            used_atomic_numbers.add(original_atomic_number)
            found_replacement = True
        else:
            for offset in range(1, len(chemical_symbols)):
                candidate_atomic_number_plus = original_atomic_number + offset
                if 1 <= candidate_atomic_number_plus < len(chemical_symbols) and \
                   candidate_atomic_number_plus not in used_atomic_numbers:
                    assigned_replacement_atomic_numbers[original_symbol] = candidate_atomic_number_plus
                    used_atomic_numbers.add(candidate_atomic_number_plus)
                    found_replacement = True
                    break
                candidate_atomic_number_minus = original_atomic_number - offset
                if 1 <= candidate_atomic_number_minus < len(chemical_symbols) and \
                   candidate_atomic_number_minus not in used_atomic_numbers:
                    assigned_replacement_atomic_numbers[original_symbol] = candidate_atomic_number_minus
                    used_atomic_numbers.add(candidate_atomic_number_minus)
                    found_replacement = True
                    break
        
        if not found_replacement:
            if is_first_frame: # 最初のフレームでのみ警告を出す
                print(f"警告: 原子種 '{original_symbol}' の新しい原子番号が見つかりませんでした。この原子種に関連する置換は行われません。")

    new_atomic_numbers = list(existing_atomic_numbers)
    
    current_frame_replacements = {} # このフレームでの実際の変更を記録

    # 変更出力のヘッダー
    if is_first_frame:
        print("\n--- 原子種の変更情報 (最初のフレーム) ---")
    else:
        print("\n--- 原子種の変更情報 (このフレーム固有の変更) ---")

    changes_made_in_this_frame = False

    for index, original_symbol_in_dict in indices_to_replace.items():
        if index < 0 or index >= len(modified_atoms):
            if is_first_frame: # 最初のフレームでのみ警告を出す
                print(f"警告: 不正なインデックス '{index}' が指定されました。スキップします。")
            continue
        
        actual_original_symbol = existing_chemical_symbols[index]
        actual_original_atomic_number = existing_atomic_numbers[index]

        if original_symbol_in_dict != actual_original_symbol and is_first_frame:
            print(f"注意: インデックス {index} の原子は指定された '{original_symbol_in_dict}' ではなく、実際には '{actual_original_symbol}' です。")

        if original_symbol_in_dict in assigned_replacement_atomic_numbers:
            assigned_new_atomic_number = assigned_replacement_atomic_numbers[original_symbol_in_dict]
            new_symbol = chemical_symbols[assigned_new_atomic_number]

            if new_atomic_numbers[index] != assigned_new_atomic_number:
                # 変更が行われる場合
                current_change_info = {
                    "before_symbol": actual_original_symbol,
                    "before_atomic_number": actual_original_atomic_number,
                    "after_symbol": new_symbol,
                    "after_atomic_number": assigned_new_atomic_number
                }
                current_frame_replacements[index] = current_change_info

                if is_first_frame or (first_frame_replacements and
                                      first_frame_replacements.get(index) != current_change_info):
                    print(f"  インデックス {index}: '{actual_original_symbol}' (原子番号 {actual_original_atomic_number}) -> '{new_symbol}' (原子番号 {assigned_new_atomic_number})")
                    changes_made_in_this_frame = True
                
                new_atomic_numbers[index] = assigned_new_atomic_number
            else:
                # 既に置換後の原子種だった場合
                current_change_info = {
                    "before_symbol": actual_original_symbol,
                    "before_atomic_number": actual_original_atomic_number,
                    "after_symbol": new_symbol, # 同じだが、置換後の目標値として記録
                    "after_atomic_number": assigned_new_atomic_number
                }
                current_frame_replacements[index] = current_change_info # 変更がなかったとしても記録

                if is_first_frame: # 最初のフレームでは常に表示
                    print(f"  インデックス {index}: '{actual_original_symbol}' (原子番号 {actual_original_atomic_number}) は既に置換後の原子種でした。")
                    changes_made_in_this_frame = True
                elif first_frame_replacements and \
                     first_frame_replacements.get(index) != current_change_info:
                     # 最初のフレームと異なる場合のみ出力
                    print(f"  インデックス {index}: '{actual_original_symbol}' (原子番号 {actual_original_atomic_number}) は既に置換後の原子種でしたが、最初のフレームとは異なる挙動です。")
                    changes_made_in_this_frame = True
        else:
            if is_first_frame: # 最初のフレームでのみ警告を出す
                print(f"警告: インデックス {index} の原子種 '{original_symbol_in_dict}' は置換されませんでした。新しい原子種が決定されなかったか、元々存在しない原子種でした。")
    
    if not changes_made_in_this_frame:
        print("  このフレームでの特筆すべき変更はありませんでした。")
    print("-------------------------")

    modified_atoms.set_atomic_numbers(new_atomic_numbers)
    return modified_atoms, current_frame_replacements # 変更後のAtomsと、このフレームでの実際の変更を返す


def apply_replacement_to_atoms_list(atoms_list: List[Atoms], indices_to_replace: Dict[int, str]) -> List[Atoms]:
    """
    Atomsオブジェクトのリスト（トラジェクトリ）を受け取り、各フレームの原子種を変更し、
    変更後の新しいAtomsオブジェクトのリストを返します。
    原子種変更に関する出力は、最初のフレームで完全な情報を提示し、
    それ以降は最初のフレームと異なる変更があった場合のみ詳細を出力します。

    Args:
        atoms_list (List[ase.Atoms]): 変更元のAtomsオブジェクトのリスト。
        indices_to_replace (dict): 変更したい原子のインデックスと元の原子種のマッピング。
                                  例: {インデックス: '元の原子種'}
                                  同じ原子種が複数回指定された場合、変更後も同じ原子種が割り当てられます。

    Returns:
        List[ase.Atoms]: 原子種が変更された新しいAtomsオブジェクトのリスト。
    """
    if not atoms_list:
        print("警告: 空のAtomsオブジェクトリストが入力されました。空のリストを返します。")
        return []

    modified_frames = []
    first_frame_actual_replacements = None # 最初のフレームでの実際の変更を記録する変数

    print(f"\n--- Atomsリスト中の {len(atoms_list)} フレームの処理を開始します ---")

    for i, frame in enumerate(atoms_list):
        if i == 0:
            # 最初のフレームは完全な変更情報を出力
            modified_frame, actual_replacements = replace_atoms_in_object(frame, indices_to_replace, is_first_frame=True)
            first_frame_actual_replacements = actual_replacements # 最初のフレームの変更を保存
        else:
            # 2番目以降のフレームは、最初のフレームとの差分のみ出力
            print(f"\n[フレーム {i+1}/{len(atoms_list)} の処理]:")
            modified_frame, _ = replace_atoms_in_object(frame, indices_to_replace,
                                                         is_first_frame=False,
                                                         first_frame_replacements=first_frame_actual_replacements)
        modified_frames.append(modified_frame)
    
    print(f"\n--- Atomsリストの原子種変更処理が完了しました。---")
    return modified_frames


if __name__ == "__main__":
    import sys
    from ase.io import read
    from ase.visualize import view

    orig_pc = sys.argv[1]
    indices = list(map(int, sys.argv[2:]))
    print(indices)
#    sys.exit()

    orig_atoms_list = read(orig_pc, index=':')
    indices_to_replace = {idx: orig_atoms_list[0][idx].symbol for idx in indices}
    new_atoms_list = apply_replacement_to_atoms_list(orig_atoms_list, indices_to_replace)
 
    print("\n--- 変更後のPOSCARの内容確認 ---")
    print(new_atoms_list[0].get_chemical_symbols())
    print(new_atoms_list[0].get_atomic_numbers())

    view(new_atoms_list)
