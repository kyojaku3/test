#!/bin/env python3
# ini:20210613, update:20250612

import os
import shutil
import subprocess
import sys
import ase
from ase.io import read,write
from ase import Atoms
from atmdata import symbol2znucl, atmdata, gettypat
from monty.os import cd

class packmol:
    def __init__(self, base_material_file, insert_mol_file, nmol):
        self.base_material_file = base_material_file
        self.insert_mol_file = insert_mol_file
        self.nmol = nmol

    def make_input(self, acell,
                   filinp="packmol.inp", 
                   user_inpvars=None,
                   seed=12345):

        inpvars = {}

        inpvars.update({
  "tolerance": 2.0,
  "filetype": "xyz",
  "output": "packmol.xyz",
  "seed": seed,
        })

        if user_inpvars != None:
            inpvars.update(user_inpvars)

        f = open(filinp, 'w')
        for key,val in inpvars.items():
            print(key," ",val, file=f)
        print("", file=f)
        # Base material
        print("structure ", self.base_material_file, file=f)
        print("  number 1", file=f)
        print("  fixed 0.0 0.0 0.0 0.0 0.0 0.0", file=f)
        print("end structure", file=f)
        print("",file=f)     
        # Insert molecule
        print("structure ", self.insert_mol_file, file=f)
        print("  number ", self.nmol, file=f)
        print("  inside box 0.0 0.0 0.0 %15.10f %15.10f %15.10f" % (acell[0], acell[1], acell[2]), file=f)
        print("end structure", file=f)


    def run(self, outdir, 
            PACKMOL_CMD=['packmol < packmol.inp > packmol.out 2>&1']):
        print(' '.join(PACKMOL_CMD))
        subprocess.call("cd " + outdir + "; " + ' '.join(PACKMOL_CMD), shell=True)


    def xyz2pbc(self, acell,
                filxyz="packmol.xyz", 
                filout="packmol.xsf"):

        tmpxyz = "tmp.xyz" 
        f = open(filxyz, 'r')
        datalist = f.readlines()
        f.close()

        n = len(datalist)
        datalist[1] = "Lattice = '" + str(acell[0]) + " 0 0 0 " + str(acell[1]) + " 0 0 0 " + str(acell[2]) + "' Properties=species:S:1:pos:R:3 pbc='T T T'\n"
        f = open(tmpxyz, 'w')
        f.write(datalist[0])
        f.write(datalist[1])
        for i in range(2,n):
            f.write(datalist[i])
        f.close()

        CMD=['ase convert ' + tmpxyz + ' ' + filout + ' -f > log-conv 2>&1']

        print(' '.join(CMD))
        subprocess.call("cd " + outdir + "; " + ' '.join(CMD), shell=True)


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument("base_material_file", type=str, help="Structure file")
    parser.add_argument("insert_mol_file", type=str, help="Structure file")
    parser.add_argument("nmol", type=int)
    parser.add_argument("target_density", type=float)
    parser.add_argument("filout", type=str)
    parser.add_argument("-wrap", "--is_wrap", action="store_true")
    parser.add_argument("-fill", "--is_fill", action="store_true", 
                        help="Fill molecules through entire cell")
    parser.add_argument("--seed", type=int, default=12345)

    args = parser.parse_args()

    print("ase versiion=",ase.__version__)

    print("nmol = ",args.nmol)
    print("target_density = ",args.target_density)
    print("filout = ",args.filout)
    print("seed = ",args.seed)

    name, ext = os.path.splitext(args.base_material_file)
    if args.is_wrap:
        print("wrap base material")
        atoms = read(args.base_material_file)
        atoms.wrap()
        base_material_file = name + "_wrap.xyz"
        write(base_material_file, atoms, format="xyz")
    else:
        if ext != "xyz":
            print("base file should be xyz format when is_wrap=False")
            sys.exit()
        base_material_file = args.base_material_file
    print(f"base_material_file = {base_material_file}")

    packmol_xyzfile = "packmol.xyz"
    user_inpvars={}
    user_inpvars.update({"tolerance": 2.0,
                         "output": packmol_xyzfile})

    packmol = packmol(base_material_file, args.insert_mol_file, args.nmol)

    atoms = read(args.base_material_file)
    acell = [a[i] for i, a in enumerate(atoms.get_cell())]
    if args.is_fill:
        print("Fill molecules through entire cell")
        acell2 = acell
    else:
        print("Subtract tolerance from cell")
        acell2 = [a - user_inpvars["tolerance"] for a in acell] 

    packmol.make_input(acell2,
                       filinp="packmol.inp", 
                       user_inpvars=user_inpvars,
                       seed=args.seed)

    outdir = './'

    mkjobscript='mkqsub_colnago.sh'
    queue='q1'
    jobname='test'
    nproc=1
    PACKMOL_COMMAND = 'packmol < packmol.inp > packmol.out 2>&1'
    PACKMOL_CMD = [mkjobscript, jobname, queue, str(nproc), '"', PACKMOL_COMMAND, '"', str(0), str(1)]

    packmol.run(outdir)
#    packmol.run(outdir, PACKMOL_CMD)

    atoms = read(packmol_xyzfile)
    molmass = atoms.get_masses().sum()
    factor = 10.0/6.02214179;
    ucvol = molmass/args.target_density*factor
    alat = ucvol**(1./3.)
    acell = [alat, alat, alat]
    print("acell = ",acell)

    density = molmass/ucvol*factor
    print("density = ",density)

    packmol.xyz2pbc(acell, filout=args.filout)
