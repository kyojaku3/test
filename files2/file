#! /usr/bin/env python3
# ini:20200510, update:20250416
# http://matgenb.materialsvirtuallab.org/2017/04/14/Inputs-and-Analysis-of-VASP-runs.html
#
# settings POTCAR:
# $ ln -s ${HOME}/code/vasp-pseudopotentials/potpaw_PBE.52 ${HOME}/code/vasp-pseudopotentials/POT_GGA_PAW_PBE_52
# $ ln -s ${HOME}/code/vasp-pseudopotentials/potpaw_PBE.54 ${HOME}/code/vasp-pseudopotentials/POT_GGA_PAW_PBE_54
# $ ln -s ${HOME}/code/vasp-pseudopotentials/potpaw_LDA.52 ${HOME}/code/vasp-pseudopotentials/POT_LDA_PAW_52
# $ ln -s ${HOME}/code/vasp-pseudopotentials/potpaw_LDA.54 ${HOME}/code/vasp-pseudopotentials/POT_LDA_PAW_54
#
# usage:
#
#os.environ['PMG_VASP_PSP_DIR'] = os.environ['HOME'] + '/code/vasp-pseudopotentials'
#from pymatgen.core import Structure
#from vaspmpset import VASP_MPSET
#calc = VASP_MPSET()
#vis = calc.make_input(common_incar, structure, potcar_functional, calctype, dir_name)
#calc.run_vasp(dir_name, VASP_CMD) 


import os
import sys
import subprocess
import shutil
import warnings
from monty.os import cd
from packaging import version

os.environ['PMG_VASP_PSP_DIR'] = os.environ['HOME'] + '/code/vasp-pseudopotentials'
VASP_VERSION = os.environ['VASP_VERSION']

#for k, v in os.environ.items():
#    if k.startswith("PMG_"):
#        print(k, v)
#sys.exit()

# Do not display some warnings
import warnings
warnings.filterwarnings("ignore",message="Overriding the POTCAR functional is generally not recommended ") # @ class DictSet in pymatgen/io/vasp/sets.py
warnings.filterwarnings("ignore",message="POTCAR with symbol") # @ class PotcarSingle in pymatgen/io/vasp/input.py
warnings.filterwarnings("ignore",message="Structure charge") # @ class IStructure in pymatgen/core/structure.py

from pymatgen.core import Structure
from pymatgen.io.vasp.inputs import Kpoints
from pymatgen.io.vasp.sets import MPRelaxSet,MPStaticSet,MPNonSCFSet,MPMDSet


class VASP_MPSET:

    def __init__(self):    
        print("PMG_VASP_PSP_DIR = " + os.environ['PMG_VASP_PSP_DIR'])


    def make_input(self,
        structure,
        user_incar_settings=None,
        user_kpoints_settings=None,
        user_potcar_settings=None,
        user_potcar_functional=None,
        vdw=None,
        use_structure_charge=None,
        lepsilon=False,
        lcalcpol=False,
        calctype='scf',
        ensemble='nve',
        outdir=None,
        prev_calc_dir=None
    ):

        if outdir == None:
            outdir=calctype
   
        if(os.path.exists(outdir)):
            shutil.rmtree(outdir)
            os.mkdir(outdir)

        if calctype.endswith('relax') or calctype.endswith('neb'):
            vis = MPRelaxSet(
                structure=structure,
                user_incar_settings=user_incar_settings,
                user_kpoints_settings=user_kpoints_settings,
                user_potcar_settings=user_potcar_settings,
                user_potcar_functional=user_potcar_functional,
                vdw=vdw,
                use_structure_charge=use_structure_charge,
            )
            vis.write_input(outdir)

        elif calctype == 'scf':
            if prev_calc_dir:
                vis = MPStaticSet.from_prev_calc(
                    prev_calc_dir=prev_calc_dir,
#                    structure=structure,
                    user_incar_settings=user_incar_settings,
                    user_kpoints_settings=user_kpoints_settings,
                    user_potcar_settings=user_potcar_settings,
                    user_potcar_functional=user_potcar_functional,
                    vdw=vdw,
                    use_structure_charge=use_structure_charge,
                    lepsilon=lepsilon,
                    lcalcpol=lcalcpol,
                )
            else:
                vis = MPStaticSet(
                    structure=structure,
                    user_incar_settings=user_incar_settings,
                    user_kpoints_settings=user_kpoints_settings,
                    user_potcar_settings=user_potcar_settings,
                    user_potcar_functional=user_potcar_functional,
                    vdw=vdw,
                    use_structure_charge=use_structure_charge,
                    lepsilon=lepsilon,
                    lcalcpol=lcalcpol,
                )

            vis.write_input(outdir)

        elif calctype == 'nscf':
            if not prev_calc_dir:
                print("prev_calc_dir should be set")
                sys.exit()
            vis = MPNonSCFSet.from_prev_calc(
                prev_calc_dir=prev_calc_dir,
                mode="uniform",
                reciprocal_density=100,
                user_incar_settings=user_incar_settings,
                user_kpoints_settings=user_kpoints_settings,
                user_potcar_settings=user_potcar_settings,
                user_potcar_functional=user_potcar_functional,
                vdw=vdw,
                use_structure_charge=use_structure_charge,
            )
            vis.write_input(outdir)  # without this, CHGCAR is not copied

        elif calctype == 'bands':
            if not prev_calc_dir:
                print("prev_calc_dir should be set")
                sys.exit()
            vis = MPNonSCFSet.from_prev_calc(
                prev_calc_dir=prev_calc_dir,
                mode="line", 
#                standardize=True,
                user_incar_settings=user_incar_settings,
                user_kpoints_settings=user_kpoints_settings,
                user_potcar_settings=user_potcar_settings,
                user_potcar_functional=user_potcar_functional,
                vdw=vdw,
                use_structure_charge=use_structure_charge,
            )
            vis.write_input(outdir)

        elif calctype == 'md': 
#            if ensemble != 'nve':
#                print("VASP_MPSET: NVE ensemble is only allowed")
#                sys.exit()
#            if user_incar_settings == None:
#                user_incar_settings = {}
#            user_incar_settings.update({"SMASS": -3})

            vis = MPMDSet(
                structure=structure,
                start_temp=1.0e-4,
                end_temp=1.0e-4,
                nsteps=100,
                spin_polarized=False,
                user_incar_settings=user_incar_settings,
                user_kpoints_settings=user_kpoints_settings,
                user_potcar_settings=user_potcar_settings,
                user_potcar_functional=user_potcar_functional,
                vdw=vdw,
                use_structure_charge=use_structure_charge,
            )
            vis.write_input(outdir)

        # delete un-used tag
        from pymatgen.io.vasp.inputs import Incar
        incar = Incar.from_file(os.path.join(outdir, "INCAR"))
        incar.pop("EDIFF_PER_ATOM", None)
        incar.write_file(os.path.join(outdir, "INCAR"))

        return vis


# Ref.: pymatgen.io.vasp.inputs.VaspInput.run_vasp (2020.4.2)
    def run_vasp(self, run_dir=".", vasp_cmd = None,
             output_file = "vasp.log", err_file = "vasp.err"):
        """

        Write input files and run VASP.
        :param run_dir: Where to write input files and do the run.
        :param vasp_cmd: Args to be supplied to run VASP (list)
        :param output_file: File to write output.
        :param err_file: File to write err.
        """

        vasp_cmd = [os.path.expanduser(os.path.expandvars(t)) for t in vasp_cmd]
        if not vasp_cmd:
            raise RuntimeError(
      "You need to supply vasp_cmd or set the PMG_VASP_EXE in .pmgrc.yaml to run VASP."
        )
        with cd(run_dir):
            with open(output_file,"w") as f_std, open(err_file,"w",buffering=1) as f_err:
                try:
                    print("Calculation starts")
                    subprocess.check_call(vasp_cmd, stdout=f_std, stderr=f_err)
                    print("Calculation is done")
                except subprocess.CalledProcessError as e:
                    print(f"Error: VASP command failed with return code {e.returncode}. Check {err_file} for details.")


class VASP_USERSET(VASP_MPSET):
    
    def make_input(self,
        structure,
        user_incar_settings=None,
        user_kpoints_settings=None,
        user_potcar_settings=None,
        user_potcar_functional=None,
        vdw=None,
        use_structure_charge=None,
        lepsilon=False,
        lcalcpol=False,
        lvib=False,
        calctype='scf',
        lattice_constraints=[True,True,True],
        project_lm=False,
        ensemble='nve',
        outdir=None,
        prev_calc_dir=None
    ):

#        if user_incar_settings == None:
#            user_incar_settings = {}
#        if user_kpoints_settings == None:
#            user_kpoints_settings = {}

        incar_settings = {}
        kpoints_settings = {}

        incar_settings.update({
  "LSCALAPACK": "False",
  "NCORE": 1,
  "ENCUT": 500,
  "EDIFF": 1.0e-05,
  "EDIFFG": -1.0e-02,
  "GGA": "PE",
  "PREC": "Accurate",
  "LREAL": "Auto",
  "ALGO": "Fast",
  "ISTART": 0,
  "ICHARG": 2,
  "ISIF": 3,  # same as MPRelaxSet.yaml
  "ISMEAR": 0,
  "SIGMA": 0.05,
  "NELM": 100,
#  "NEDOS": 2001,
  "NSW": 100,
  "ISPIN": 1,
  "LORBIT": 0,
  "LWAVE": "False",
  "LCHARG": "False",
  "LAECHG": "False",
  "LVHAR": "False",
  "LWAVE": "False",
  "LDAU": "False",
        })
        if calctype != 'bands':
            kpoints_settings.update({
                "reciprocal_density": 64
            })
        potcar_functional = 'PBE_54'

        if calctype.endswith('relax'):
            incar_settings.update({"IBRION": 2})
            if calctype == 'vc-relax':
                incar_settings.update({"ISIF": 3})
            if calctype == 'relax':
                incar_settings.update({"ISIF": 0})
            if calctype == 'man-relax':
                print("use ISIF from input")
            if not all(lattice_constraints):
                if version.parse(VASP_VERSION) >= version.parse('6.4.3'):
                    incar_settings.update({
                        "LATTICE_CONSTRAINTS": lattice_constraints,
                    })
                else:
                    ICELL = [1 for i in range(9)]
                    if not lattice_constraints[0]:
                        ICELL[0]=ICELL[1]=ICELL[2]=ICELL[3]=ICELL[6]=0
                    if not lattice_constraints[1]:
                        ICELL[1]=ICELL[3]=ICELL[4]=ICELL[5]=ICELL[7]=0
                    if not lattice_constraints[2]:
                        ICELL[2]=ICELL[5]=ICELL[6]=ICELL[7]=ICELL[8]=0
                    incar_settings.update({
                        "IOPTCELL": ICELL,
                    })

        if calctype == 'scf':
            incar_settings.update({
                "IBRION": -1,
                "NSW": 0,
                "LCHARG": "True", 
                "LAECHG": "True", 
                "LVHAR": "True",
            })
            if lepsilon:
                incar_settings.update({
                    "IBRION": 8,
                    "NSW": 1,
                })
            if lvib:
                incar_settings.update({
                    "IBRION": 5,
                    "NFREE": 2,
                    "NSW": 1,
                    "POTIM": 0.015,
                })
        if calctype == 'nscf' or calctype == 'bands':
            incar_settings.update({
                "IBRION": -1,
                "NSW": 0,
                "ICHARG": 11,
            })
            if project_lm:
                incar_settings.update({
                    "LORBIT": 11,
#                    "ISYM": 0,
                })

        if calctype == 'nscf':
            incar_settings.update({
                "ISMEAR": -5, 
            })
            kpoints = Kpoints.from_file(os.path.join(prev_calc_dir, "KPOINTS"))
            kpts_prev = kpoints.kpts
            if len(kpts_prev) != 1:
                print(f"len(kpts)=1 is only allowed, however kpts = {kpts_prev}")
                sys.exit()
            else:
                kpoints.kpts = [ tuple(kp * 2 for kp in kpts_prev[0]) ]
            kpoints_settings = kpoints

        if calctype == 'md':
            incar_settings.update({
                "IBRION": 0,
                "ADDGRID" : "False",
                "ALGO": "Very Fast",
                "PREC": "Normal",
            })
            if ensemble == 'nve':
                incar_settings.update({
                    "MDALGO": 0,
                    "ISIF": 0,
                    "SMASS": -3,
#                    "MDALGO": 1,
#                    "ANDERSEN_PROB": 0.0,
                })
            if ensemble == 'nvt':  # Nose-Hoover thermostat
                incar_settings.update({
                    "MDALGO": 2,
                    "ISIF": 2,
                    "SMASS": 3,
                })
            if ensemble == 'npt':  # Langevin thermostat
                # Ref. pymatgen.io.vasp.sets.MVLNPTMDSet
                incar_settings.update({
                    "MDALGO": 3,
                    "ISIF": 3,
                    "LANGEVIN_GAMMA": [10] * structure.ntypesp,
                    "LANGEVIN_GAMMA_L": 1,
                    "PMASS": 10,
                    "PSTRESS": 0,
                })


        elif calctype.endswith('neb'):
            incar_settings.update({
                "NSW": 200,
                "IBRION": 1,
                "ISIF": 0,
                "IMAGES": 5,
                "SPRING": -5,
            })
            if calctype == 'ci-neb' or calctype == 'ss-neb':
                incar_settings.update({
                    "ISIF": 2,
                    "NELMIN": 5,
                    "ICHAIN": 0,
                    "LCLIMB": True,
                    "IOPT": 0,
                    "IBRION": 3,
                    "POTIM": 0,
                })
            if calctype == 'ss-neb':
                incar_settings.update({
                    "ISIF": 3,
                    "IOPT": 3,
                    "LNEBCELL": True,
                })

        # When LDA+U is used, setting ALGO=Normal is safer.
        if user_incar_settings.get("LDAU") is True:
            incar_settings.update({
                "ALGO": "Normal",
            })

        if user_incar_settings != None:
            incar_settings.update(user_incar_settings)
            print(incar_settings)

        if user_kpoints_settings != None:
            kpoints_settings = user_kpoints_settings

        if user_potcar_settings != None:
            potcar_settings = user_potcar_settings

        if user_potcar_functional != None:
            potcar_functional = user_potcar_functional

        super().make_input(
            structure,
            user_incar_settings=incar_settings,
            user_kpoints_settings=kpoints_settings,
            user_potcar_settings=user_potcar_settings,
            user_potcar_functional=potcar_functional,
            vdw=vdw,
            use_structure_charge=use_structure_charge,
            lepsilon=lepsilon,
            lcalcpol=lcalcpol,
            calctype=calctype,
            ensemble=ensemble,
            outdir=outdir,
            prev_calc_dir=prev_calc_dir
        )  


if __name__ == "__main__":
    import argparse
    import yaml
    import json
    from pymatgen.io.vasp.inputs import Kpoints
    from pymatgen.io.vasp import Vasprun

    desc = '''usage:
$ python3 vaspmpset.py Si_mp-149_computed.cif scf None 6 -r true -y test2.yaml
$ python3 vaspmpset.py Si_mp-149_computed.cif scf None 6 -r true --ensemble nve --vdw dftd2 -func PBE_54 -incar '{"ISPIN":1,"ENCUT":500}' -potcar '{"Ge":"Ge"}' -kpt 'Kpoints.gamma_automatic((2,2,2))'
'''
    parser = argparse.ArgumentParser(description=desc, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('structfile', type=str)
    parser.add_argument('calctype', type=str, 
        choices=['scf','nscf','relax','vc-relax','man-relax','bands','md','neb','ci-neb','ss-neb'])
    parser.add_argument('prev_calc_dir', type=str)
    parser.add_argument('nproc', type=int)
    parser.add_argument('-o', '--outdir', type=str, help='if not given, outdir=calcdir')
    parser.add_argument('-y', '--yamlfile', type=str)
    parser.add_argument('-i', '--MAKE_INPUT', type=str, default='true')
    parser.add_argument('-r', '--VASP_RUN', type=str, default='true')
    parser.add_argument('-v', '--vasp_cmd', type=str, default='vasp_std', choices=['vasp_std','vasp_gam','vasp_ncl'])
    parser.add_argument('-lc', '--lattice_constraints', type=str, nargs=3, 
        default=['true','true','true'], help='selective cell relaxation')
    parser.add_argument('-p', '--project_lm', type=str, default='false', 
        help='will be used when nscf/bands calc')
    parser.add_argument('-incar', '--incar_settings', type=json.loads, default=None)
    parser.add_argument('-kpt', '--kpoints', type=str, default=None, 
        help='ex. Kpoints.gamma_automatic((1,1,1))')
    parser.add_argument('-potcar', '--potcar_settings', type=json.loads, default=None)
    parser.add_argument('-func', '--potcar_functional', type=str, default='PBE_54')
    parser.add_argument('--vdw', type=str, default=None, 
        help='dftd2:D2, dftd3:D3zero, defined at pymatgen/io/vasp/vdW_parameters.yaml')
    parser.add_argument('--ensemble', type=str, default=None, choices=['nve','nvt','npt'],
        help='nve/nvt/npt can be set.')
    parser.add_argument('--charge', type=float, default=None, help='charge state')
    parser.add_argument('--lepsilon', type=str, default='false', 
        help='Whether to add static dielectric calculation. \
In pymatgen.io.vasp.sets, incar update = {"IBRION": 8, "LEPSILON": True, "LPEAD": True, "NSW": 1, "EDIFF": 1e-5} ')
    parser.add_argument('--lcalcpol', type=str, default='false', 
        help='Whether to turn on evaluation of the Berry phase approximations for electronic polarization. \
In pymatgen.io.vasp.sets, incar update = {"LCALCPOL": True} ')
    parser.add_argument('--lvib', type=str, default='false', 
        help='Whether to add vibration calculation.')
    parser.add_argument('-sf2', '--structfile2', type=str)

    args = parser.parse_args()
    structfile = os.path.abspath(args.structfile)
    calctype = args.calctype
    prev_calc_dir = args.prev_calc_dir
    nproc = args.nproc
    MAKE_INPUT = args.MAKE_INPUT.lower() == 'true'
    VASP_RUN = args.VASP_RUN.lower() == 'true'
    project_lm = args.project_lm.lower() == 'true'
    lattice_constraints = [args.lattice_constraints[i].lower() == 'true' for i in range(3)]
    lepsilon = args.lepsilon.lower() == 'true'
    lcalcpol = args.lcalcpol.lower() == 'true'
    lvib = args.lvib.lower() == 'true'
    print(f"structfile={structfile}")
    print(f"calctype={calctype}")
    print(f"prev_calc_dir={prev_calc_dir}")
    print(f"nproc={nproc}")
    print(f"MAKE_INPUT={MAKE_INPUT}")
    print(f"VASP_RUN={VASP_RUN}")
    print(f"lattice_constraints={lattice_constraints}")
    print(f"project_lm={project_lm}")
    if prev_calc_dir == 'None':
        prev_calc_dir = None
    if args.structfile2:
        structfile2 = os.path.abspath(args.structfile2)
        print(f"structfile2={structfile2}")

    outdir = calctype
    if args.outdir:
        outdir = args.outdir
    print(f"outdir={outdir}")

    incar_settings={}
    kpoints = None
    potcar_settings={}
    vdw = None
    ensemble = None
    charge = None
    use_structure_charge = False

    # set input variables using yaml file
    if args.yamlfile:
        with open(args.yamlfile, 'r') as file:
              params = yaml.safe_load(file)
#        print(f"params = {params}")

        for key in params.keys():
#            print(key)
            if params[key] == None:
                continue

            if key == 'incar_settings':
                incar_settings.update(params[key])
            elif key == 'kpoints':
                kpoints = eval(params[key])
            elif key == 'potcar_settings':
                potcar_settings.update(params[key])
            elif key == 'potcar_functional':
                potcar_functional = params[key]
            elif key == 'vdw':
                vdw = params[key]
            elif key == 'ensemble':
                ensemble = params[key]
            elif key == 'charge':
                charge = params[key]

    # override parameters if argument is given
    if args.incar_settings: incar_settings.update(args.incar_settings)
    if args.kpoints: kpoints = eval(args.kpoints)
    if args.potcar_settings: potcar_settings.update(args.potcar_settings)
    if args.potcar_functional: potcar_functional = args.potcar_functional
    if args.vdw: vdw = args.vdw
    if args.ensemble: ensemble = args.ensemble
    if args.charge: charge = args.charge
    print(f"incar_settings = {incar_settings}")
    print(f"kpoints = {kpoints}")
    print(f"potcar_settings = {potcar_settings}")
    print(f"potcar_functional = {potcar_functional}")
    print(f"vdw = {vdw}")
    print(f"ensemble = {ensemble}")
    print(f"charge = {charge}")
#    sys.exit()

#    calc = VASP_MPSET()
    calc = VASP_USERSET()
#    print(os.environ['PMG_VASP_PSP_DIR'])

    if MAKE_INPUT:
        structure = Structure.from_file(structfile)
        if charge: 
            use_structure_charge = True
            structure.set_charge(charge)
        if calctype.endswith('neb'):
            if "IMAGES" in incar_settings.keys():
                nimage=incar_settings["IMAGES"]
            else:
                nimage=5
                incar_settings["IMAGES"]=nimage
        vis = calc.make_input(structure,
              user_incar_settings=incar_settings,
              user_kpoints_settings=kpoints,
              user_potcar_settings=potcar_settings,
              user_potcar_functional=potcar_functional,
              vdw=vdw,
              use_structure_charge=use_structure_charge,
              lepsilon=lepsilon,
              lcalcpol=lcalcpol,
              lvib=lvib,
              calctype=calctype,
              lattice_constraints=lattice_constraints,
              project_lm=project_lm,
              ensemble=ensemble,
              outdir=outdir,
              prev_calc_dir=prev_calc_dir)

        if calctype.endswith('neb'):
            print(f"nimage = {nimage}")
            with cd(outdir):
                subprocess.run(f"nebmake.pl {structfile} {structfile2} {nimage}", shell=True)

    if VASP_RUN:
# get VaspInput class
#        vi = vis.get_vasp_input()
#        vi.run_vasp(run_dir=outdir,vasp_cmd=VASP_CMD)  # make input and run vasp

# use own run_vasp module because Vaspinput.run_vasp creates input files
        VASP_COMMAND = args.vasp_cmd
        VASP_CMD = ['mpirun', '-np', str(nproc), VASP_COMMAND]
        calc.run_vasp(outdir, VASP_CMD)

        if calctype == 'scf' or calctype == 'relax' or calctype == 'vc-relax':
            attempt = 1
            while True:
                print(f"Attempt {attempt}: ")
                try:
                    vsfile = os.path.join(outdir, "vasprun.xml")
                    v = Vasprun(vsfile)
                    if v.converged:
                        print("Calculation has converged successfully.")
                        break
                    else:
                        print(f"Attempt {attempt}: Calculation has not converged.")
                except Exception as e:
                    print(f"Error has occurred: {e}")

                # Exit after 5 attempts if the calculation hasn't converged
                if attempt >= 5:
                    print(f"Calculation has failed no converge after {attempt} attempts. Exiting with error.")
                    sys.exit(1)

                # make a directory for previous calculation
                old_outdir = f"{attempt}st" if attempt == 1 \
                        else f"{attempt}nd" if attempt == 2 \
                        else f"{attempt}rd" if attempt == 3 \
                        else f"{attempt}th"
                old_outdir_path = os.path.join(outdir, old_outdir)

                os.makedirs(old_outdir_path, exist_ok=True)
                print(f"Created directory: {old_outdir_path}")

                # copy previous files
                for item in os.listdir(outdir):
                    source = os.path.join(outdir, item)
                    destination = os.path.join(old_outdir_path, item)
                    if os.path.isfile(source):
                        shutil.copy2(source, destination)

                contcar_path = os.path.join(outdir, 'CONTCAR')
                poscar_path = os.path.join(outdir, 'POSCAR')
                if os.path.exists(contcar_path):
                    try:
                        os.rename(contcar_path, poscar_path)
                        print(f"Renamed {contcar_path} to {poscar_path}.")
                    except Exception as e:
                        print(f"Failed to rename {contcar_path} to {poscar_path}: {e}")
                else:
                    print("CONTCAR not found. Stopping further attempts.")
                    break

                # Run the VASP calculation again
                calc.run_vasp(outdir, VASP_CMD)
                attempt += 1
          

        if calctype == 'scf' or calctype == 'relax' or calctype == 'vc-relax':
            print(v.final_energy) # final total energy

        if calctype == 'relax' or calctype == 'vc-relax':
            s = v.final_structure
            s.to(filename = os.path.join(outdir,"final.cif")) # save relaxed structure into cif file

